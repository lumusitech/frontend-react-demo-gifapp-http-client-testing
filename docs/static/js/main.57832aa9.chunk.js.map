{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","buscar","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,EAAWK,QAAhB,mBAA2BE,OACnDN,EAAc,MAMlB,UACI,4BAAID,IACJ,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,GAAc,SAAAD,GAAU,OAAIG,EAAEQ,OAAOF,gB,+BCPhCG,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACF,uCACH,EACRC,EAASC,UAAUH,GACT,mCACVI,EALa,UACF,uCADE,cAKUF,EALV,kBAEL,EAFK,oBAIH,oCAJG,SAOAG,MAAMD,GAPN,cAObE,EAPa,iBAQIA,EAAKC,OART,wBAQXC,EARW,EAQXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAdvB,kBAkBZK,GAlBY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAEjC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCuBDO,EAzBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEf,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OAXAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACrB,IAGGsB,EDtB0BK,CAAa3B,GAAjCc,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKrB,IAEJqB,GAAW,mBAAGJ,UAAU,6CAAb,wBAEZ,qBAAKA,UAAU,gEAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEOtBgB,EAtBM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EACjD,EAAoC3C,mBAAS2C,GAA7C,mBAAOnC,EAAP,KAAmBT,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGIS,EAAWgB,KAAI,SAAAV,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,U,MCV7B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.57832aa9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(inputValue => e.target.value)\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue.trim(), ...categories]);\n            setInputValue('');\n        }\n    };\n\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <p>{inputValue}</p>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async (category) => {\n    const url_base = 'https://api.giphy.com/v1/gifs/search';\n    const limit = 5;\n    const buscar = encodeURI(category);\n    const api_key = 'jdvZMbDstUoUU74RPdsakdWajFgXfFIh';\n    const url = `${url_base}?q=${buscar}&limit=${limit}&api_key=${api_key}`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n};","import React from 'react'\nimport { PropTypes } from 'prop-types'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport PropTypes from 'prop-types'\n\nimport { GifGridItem } from './GifGridItem'\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category)\n\n    return (\n        <>\n            <h3>{category}</h3>\n\n            {loading && <p className=\"card-grid animate__animated animate__flash\">Loading...</p>}\n\n            <div className=\"card-grid animate__animated animate__fadeIn animate__delay-1s\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    )\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}","import { useState, useEffect } from 'react'\n\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    // useEffect(() => {\n    //     getGifs(category)\n    //         .then(setImages); // Forma abreviada\n    //     // Cuando solo se pasa un elemento, se simplifica\n    //     // poniendo solamente el nombre de la función\n    //     // Forma extensa\n    //     // .then(imgs => setImages(imgs));\n    // }, [category]); // Si está en la lista de cambios, se renderizará\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n\n    return state; // { data: [], loading: true }\n}","import React, { useState } from 'react'\n\nimport { AddCategory } from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = ({ defaultCategories = [] }) => {\n    const [categories, setCategories] = useState(defaultCategories)\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            {\n                categories.map(category =>\n                    <GifGrid\n                        key={category}\n                        category={category}\n                    />\n                )\n            }\n\n        </div>\n    )\n}\n\nexport default GifExpertApp\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);"],"sourceRoot":""}